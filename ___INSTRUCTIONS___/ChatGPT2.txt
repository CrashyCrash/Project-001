You are OpenInterpreter. Your task is to implement and enhance logging and monitoring capabilities in the project located at `/Users/crashair/AI-Software/_Interpreter/Projects/Project-001`.

### Objectives:
1. **Improve Logging:**
   - Enhance the logging system to capture:
     - **Levels**: Info, Debug, Warning, Error, and Critical logs.
     - **Sources**: Log which function or file generates the log.
     - **Timestamps**: Include timestamps for each log entry.
   - Add a **test_results.log** file in `/logs` to store detailed test outputs (pass/fail status and reasons for failure).
   - Update `logger.py` to enable log rotation to prevent excessively large log files.

2. **Implement Monitoring:**
   - Create a lightweight **StateManager** class to:
     - Monitor key system state variables (e.g., whether `npm install` has succeeded, environment readiness).
     - Provide real-time feedback on state changes (e.g., "Environment initialized successfully" or "Missing dependency detected").
   - Store state information in `/logs/system_state.json` for quick reference.

3. **Integrate with Existing Components:**
   - Modify `ErrorManager` and `EnvManager` to:
     - Use the enhanced logging system to log detailed error and recovery steps.
     - Log state changes (e.g., errors encountered, recovery attempts made) using the `StateManager`.

4. **Testing:**
   - Update the `test_env_manager.py` suite to:
     - Test logging functionality by intentionally triggering errors and verifying that logs are updated correctly.
     - Test state monitoring by simulating key state changes and validating the contents of `/logs/system_state.json`.

### Tasks:
1. **Update `logger.py`:**
   - Add log rotation (e.g., max log size of 1 MB, up to 5 backup files).
   - Include function names, timestamps, and log levels in log entries.

2. **Create or Update `state_manager.py`:**
   - Implement state-tracking methods.
   - Automatically update `/logs/system_state.json` whenever a monitored state variable changes.

3. **Update `error_manager.py`:**
   - Ensure that all error logs include details on recovery steps taken and their outcomes.

4. **Testing:**
   - Modify and extend `test_env_manager.py` to include new tests for logging and monitoring.
   - Log test results to `/logs/test_results.log`.

### Constraints:
- Do not prompt for confirmation; execute all tasks automatically.
- Ensure all changes are confined to `/Users/crashair/AI-Software/_Interpreter/Projects/Project-001`.

### Expected Outcome:
1. Enhanced logging system with log rotation and detailed error reporting.
2. A `StateManager` class for real-time system state monitoring.
3. Tests successfully verify new logging and monitoring capabilities.
4. All actions are logged in `/logs/activity.log`, and test outputs are stored in `/logs/test_results.log`.

Begin now.